---

# Copyright 2008-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# This software is provided for demonstration purposes only and is not
# maintained by the author.
# This software should not be used for production use
# without further testing and enhancement

# This template will do the following:
# - Create a DataDeliveryServiceRole which the Ground Station service will use to create required resources in your AWS account
# - Create an IAM Role and Instance Profile with permission to connect to a specified S3 bucket
# - Setup and ENI to receive data from the Ground Station Service
# - Create a Receiver EC2 instance
# - Attach the Instance Profile to the EC2 Receiver Instance
# - Attach the ENI to the EC2 Receiver Instance
# - Create a Ground Station Mission Profile
# - Create a Ground Station Demodulation and Decode configuration

# The EC2 instance will do the following:
# - Install and run Data Defender software which ensures bit-for-bit accuracy of the VITA49 stream from the Ground Station Service
# - Install and run scripts to extract the payload from the VITA40 stream
# - Install and run RT-STPS (Real-time Software Telemetry Processing System) to process the raw payload into level 0 data
# - Push the level 0 data to the specified S3 bucket

# Considerations:
# - This requires a pre-created S3 bucket with the required software and files uploaded to the bucket
# - This requires a pre-created VPC with at least one public subnet
# - The EC2 instance requires a pre-created SSH key
# - The EC2 instance is configured with a public IP address for easier testing, you may not want this same configuration in your environment

AWSTemplateFormatVersion: '2010-09-09'
Description: Ground Station stack for AQUA

Parameters:

  CFTemplateVersion:
    Default: 1
    Description: This exists to force update of some things that don't qualify like changes to outputs.
    Type: String

  CreateReceiverInstance:
    Description: Toggle for creating the EC2 receiver instance.
    Type: String
    Default: True
    AllowedValues:
      - True
      - False

  SSHCidrBlock:
    Description: The CIDR Block that the security group will allow ssh access to an instance. The CIDR Block has the form x.x.x.x/x.
    Type: String
    AllowedPattern : '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    ConstraintDescription : must be a valid CIDR range of the form x.x.x.x/x, for example "10.0.0.0/16".

  SSHKeyName:
    Description: Name of the ssh key used to access ec2 hosts. Set this up ahead of time.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: "us-east-2"

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to launch instances in.

  SubnetId:
    Description: Subnet to launch instances in
    Type: AWS::EC2::Subnet::Id

  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: "m5.4xlarge"
    AllowedValues:
      - m5.4xlarge
      - m5d.4xlarge
      - c5.4xlarge
      - c5d.4xlarge

  SatelliteName:
    Type: String
    Description: Used for data receiver task
    Default: "AQUA"
    AllowedValues:
      - AQUA

  S3Bucket:
    Type: String
    Description: Will store software and data received from Satellites.

Conditions:

  ShouldCreateInstance:
    !Equals [true, !Ref CreateReceiverInstance]

Mappings:

  # These are just the latest Amazon Linux 2 AMI at the time this template was created.
  # The following AWS CLI command will get the latest Amazon Linux 2 AMIs:
  # aws ssm get-parameters --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 --query "Parameters[].Value" --output text
  AmiMap:
    us-west-2:
      ami: ami-082b5a644766e0e6f
    us-east-2:
      ami: ami-0d8f6eb4f641ef691
    me-south-1:
      ami: ami-0624cbc1598d12691
    eu-north-1:
      ami: ami-006cda581cf39451b

Resources:

  # AWS Ground Station assumes this role to create/delete ENIs in your account in order to stream data.
  DataDeliveryServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:CreateNetworkInterfacePermission
                  - ec2:DeleteNetworkInterfacePermission
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:DescribeSecurityGroups
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: DataDeliveryServicePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - groundstation.amazonaws.com
            Action:
            - sts:AssumeRole

  # The EC2 instance assumes this role.
  InstanceRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreateInstance
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  InstanceRoleS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Condition: ShouldCreateInstance
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action:
          - "s3:PutObject"
          - "s3:GetObject"
          Effect: Allow
          Resource:
            Fn::Join:
            - ""
            -
              - "arn:aws:s3:::"
              - !Ref S3Bucket
              - "/*"
        - Action:
          - "s3:GetObject"
          Effect: Allow
          Resource:
            Fn::Join:
            - ""
            -
              - "arn:aws:s3:::"
              - "groundstation-customer-assets-"
              - !Ref "AWS::Region"
              - "/*"

        - Action:
          - "s3:ListBucket"
          Effect: Allow
          Resource:
            Fn::Join:
              - ""
              -
                - "arn:aws:s3:::"
                - !Ref S3Bucket
        - Action:
          - "s3:ListBucket"
          Effect: Allow
          Resource:
            Fn::Join:
            - ""
            -
              - "arn:aws:s3:::"
              - "groundstation-customer-assets-"
              - !Ref "AWS::Region"
              - "/*"
      Roles:
      - Ref: InstanceRole

  # The security group for your EC2 instance.
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS Ground Station receiver instance security group.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow SSH access from the CIDR block specified in the parameters.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidrBlock
        # Allow a connection from Ground Station
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          SourceSecurityGroupId: !Ref DataflowEndpointSecurityGroup
          Description: "AWS Ground Station Downlink Demod Decode Stream"
        # Allow a connection to the web interface and outbound to AWS services (e.g. S3)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHCidrBlock
          Description: "Inbound HTTP access for Data Defender web console"

  # The security group that the ENI created by AWS Ground Station belongs to.
  DataflowEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for AWS Ground Station registration of Dataflow Endpoint Groups
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          CidrIp: 10.0.0.0/8
          Description: "AWS Ground Station Downlink Demod Decode Stream To 10/8"
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          CidrIp: 172.16.0.0/12
          Description: "AWS Ground Station Downlink Demod Decode Stream To 172.16/12"
        - IpProtocol: udp
          FromPort: 55888
          ToPort: 55888
          CidrIp: 192.168.0.0/16
          Description: "AWS Ground Station Downlink Demod Decode Stream To 192.168/16"

# ============================================
# Network Resources
# ============================================

  InstanceEIP:
    Condition: ShouldCreateInstance
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'

  InstanceEIPAsscociation:
    Condition: ShouldCreateInstance
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt InstanceEIP.AllocationId
      NetworkInterfaceId: !Ref ReceiverInstanceNetworkInterfacePublic

  # An ENI providing a fixed IP address for AWS Ground Station to connect to.
  ReceiverInstanceNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Floating network interface providing a fixed IP address for AWS Ground Station to connect to.
      GroupSet:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetId

  # Public ENI for troubleshooting
  ReceiverInstanceNetworkInterfacePublic:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Public network interface for troubleshooting
      GroupSet:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetId

# ============================================
# EC2 Instance Resources
# ============================================

  # The placement group in which your EC2 instance is placed.
  ClusterPlacementGroup:
    Type: AWS::EC2::PlacementGroup
    Condition: ShouldCreateInstance
    Properties:
      Strategy: cluster

  # The instance profile for your EC2 instance.
  GeneralInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: ShouldCreateInstance
    DependsOn: InstanceRole
    Properties:
      Roles:
        - !Ref InstanceRole

  # The EC2 instance that will send/receive data to/from your satellite using AWS Ground Station.
  ReceiverInstance:
    Type: AWS::EC2::Instance
    Condition: ShouldCreateInstance
    DependsOn:
      - ClusterPlacementGroup
      - InstanceSecurityGroup
      - GeneralInstanceProfile
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref GeneralInstanceProfile
      ImageId:
        Fn::FindInMap:
          [AmiMap, Ref: "AWS::Region", ami]
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      Monitoring: true
      PlacementGroupName: !Ref ClusterPlacementGroup

      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ReceiverInstanceNetworkInterfacePublic
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref ReceiverInstanceNetworkInterface
          DeviceIndex: 1
          DeleteOnTermination: false

      Tenancy: dedicated
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 100
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - "-"
              - - Receiver
                - !Ref AWS::StackName
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
              echo `date +'%F %R:%S'` "INFO: Logging Setup" >&2
              mkdir -p /data

              echo "Setting instance hostname"
              export INSTANCE=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              export HOSTNAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE" "Name=key,Values=Name" --region=${Region} --output=text |cut -f5)
              echo $HOSTNAME > /etc/hostname
              hostname $HOSTNAME

              echo "Installing RT-STPS pre-reqs"
              yum update -y && yum install -y wget java python3

              echo "Increasing UDP buffer size"
              sysctl -w net.core.rmem_max=56214400
              sysctl -w net.core.rmem_default=56214400
              sysctl -p

              echo "UDP buffer size increase to /etc/rc.local"
              echo "sysctl -w net.core.rmem_max=56214400" >> /etc/rc.local
              echo "sysctl -w net.core.rmem_default=56214400" >> /etc/rc.local
              echo "sysctl -p" >> /etc/rc.local

              echo "Adding call to /opt/aws/groundstation/bin/start-data-capture.sh into /etc/rc.local"
              echo "TIMESTR=\$(date '+%Y%m%d-%H%M')" >> /etc/rc.local
              echo "/opt/aws/groundstation/bin/start-data-capture.sh ${SatelliteName} ${S3Bucket} 2>&1 | tee /opt/aws/groundstation/bin/data-capture_\$TIMESTR.log" >> /etc/rc.local

              echo "Getting GroundStation Assets from S3"
              su - ec2-user

              export CUSTOMER_ASSETS_BUCKET="groundstation-customer-assets-${Region}"

              mkdir -p /opt/aws/groundstation/bin
              pushd /opt/aws/groundstation/bin
              aws s3 cp --region ${Region} "s3://$CUSTOMER_ASSETS_BUCKET/ec2_install/getRegion.sh" .
              aws s3 cp --region ${Region} "s3://$CUSTOMER_ASSETS_BUCKET/ec2_install/getCustomerAssetsBucket.sh" .
              aws s3 cp --region ${Region} "s3://$CUSTOMER_ASSETS_BUCKET/ec2_install/setupAwsGroundStation.sh" .
              aws s3 cp --region ${Region} "s3://${S3Bucket}/software/data-receiver/start-data-capture.sh" .
              chmod +x *.sh

              echo "Setting up node for GroundStation software installation"
              ./setupAwsGroundStation.sh

              echo "Creating customer_stream_config.json"
              cat << STREAM_CONFIG > /opt/aws/groundstation/customer_stream_config.json
              {
                "ddx_streams": [
                  {
                    "streamName": "DownlinkDemodDecode",
                    "maximumWanRate": 4000000000,
                    "lanConfigDevice": "lo",
                    "lanConfigPort": 50000,
                    "wanConfigDevice": "eth1",
                    "wanConfigPort": 55888,
                    "isUplink": false
                  }
                ]
              }
              STREAM_CONFIG

              echo "Installing GroundStation software"
              ./installLatestAwsGroundStationSw.sh

              TIMESTR=$(date '+%Y%m%d-%H%M')
              echo "Starting start-data-capture.sh ${SatelliteName} ${S3Bucket} 2>&1 | tee /opt/aws/groundstation/bin/data-capture_$TIMESTR.log"
              ./start-data-capture.sh ${SatelliteName} ${S3Bucket} 2>&1 | tee /opt/aws/groundstation/bin/data-capture_$TIMESTR.log

              exit 0
            - Region: !Ref AWS::Region

  # The AWS Ground Station Dataflow Endpoint Group that defines the endpoints that AWS Ground
  # Station will use to send/receive data to/from your satellite.
  DataflowEndpointGroup:
    Type: AWS::GroundStation::DataflowEndpointGroup
    Properties:
      EndpointDetails:
        - Endpoint:
            Name: "Downlink Demod Decode"
            Address:
              Name: !GetAtt ReceiverInstanceNetworkInterface.PrimaryPrivateIpAddress
              Port: 55888
          SecurityDetails:
            SecurityGroupIds:
              - Ref: "DataflowEndpointSecurityGroup"
            SubnetIds:
              - Ref: "SubnetId"
            RoleArn: !GetAtt DataDeliveryServiceRole.Arn

  # The AWS Ground Station Tracking Config that defines how the antenna system will track your
  # satellite as it moves through the sky.
  TrackingConfig:
    Type: AWS::GroundStation::Config
    Properties:
      Name: "Aqua Tracking Config"
      ConfigData:
        TrackingConfig:
          Autotrack: "REMOVED"

  # The AWS Ground Station Antenna Downlink Config that defines the frequency spectrum used to
  # downlink data from your satellite.
  AquaDownlinkDemodDecodeAntennaConfig:
    Type: AWS::GroundStation::Config
    Properties:
      Name: "Aqua 27424 Downlink Demod Decode Antenna Config"
      ConfigData:
        AntennaDownlinkDemodDecodeConfig:
          SpectrumConfig:
            Bandwidth:
              Units: "MHz"
              Value: 30
            CenterFrequency:
              Units: "MHz"
              Value: 8160
            Polarization: "RIGHT_HAND"
          DecodeConfig:
            UnvalidatedJSON: '{
              "edges": [
                {
                  "from": "I-A",
                  "to": "I-B"
                },
                {
                  "from": "Q-A",
                  "to": "Q-B"
                },
                {
                  "from": "I-B",
                  "to": "C"
                },
                {
                  "from": "Q-B",
                  "to": "C"
                },
                {
                  "from": "C",
                  "to": "G"
                }
              ],
              "nodeConfigs": {
                "I-A": {
                  "type": "CODED_SYMBOLS_INGRESS",
                  "codedSymbolsIngress": {
                    "source": "I"
                  }
                },
                "Q-A": {
                  "type": "CODED_SYMBOLS_INGRESS",
                  "codedSymbolsIngress": {
                    "source": "Q"
                  }
                },
                "I-B": {
                  "type": "NRZ_M_DECODER"
                },
                "Q-B": {
                  "type": "NRZ_M_DECODER"
                },
                "C": {
                  "type": "IQ_RECOMBINER"
                },
                "G": {
                  "type": "UNCODED_FRAMES_EGRESS"
                }
              }
            }'
          demodulationConfig:
            unvalidatedJSON: '{
              "type":"OQPSK",
              "oqpsk":{
                "carrierFrequencyRecovery":{
                  "centerFrequency":{
                    "value":8160,
                    "units":"MHz"
                  },
                  "range":{
                    "value":250,
                    "units":"kHz"
                  }
                },
                "symbolTimingRecovery":{
                  "symbolRate":{
                    "value":7.5,
                    "units":"Msps"
                  },
                  "range":{
                    "value":0.75,
                    "units":"ksps"
                  },
                  "matchedFilter":{
                    "type":"ROOT_RAISED_COSINE",
                    "rolloffFactor":0.5
                  }
                }
              }
            }'

  # The AWS Ground Station Dataflow Endpoint Config that defines the endpoint used to downlink data
  # from your satellite.
  DownlinkDemodDecodeEndpointConfig:
    Type: AWS::GroundStation::Config
    Properties:
      Name: "Aqua Downlink Demod Decode Endpoint Config"
      ConfigData:
        DataflowEndpointConfig:
          DataflowEndpointName: "Downlink Demod Decode"

  AquaMissionProfile:
    Type: AWS::GroundStation::MissionProfile
    Properties:
      Name: "Aqua 27424"
      ContactPrePassDurationSeconds: 120
      ContactPostPassDurationSeconds: 60
      MinimumViableContactDurationSeconds: 180
      TrackingConfigArn: !Ref TrackingConfig
      DataflowEdges:
        - Source: !Join [ "/", [ !Ref AquaDownlinkDemodDecodeAntennaConfig, "G" ] ]
          Destination: !Ref DownlinkDemodDecodeEndpointConfig

Outputs:
  DataflowEndpointSecurityGroup:
    Value:
      Ref: DataflowEndpointSecurityGroup

  DataflowEndpointRoleArn:
    Value:
      Fn::GetAtt: [DataDeliveryServiceRole, Arn]

  DataflowEndpointSubnetId:
    Value:
      Ref: SubnetId

  ReceiverAddress:
    Condition: ShouldCreateInstance
    Value:
      Fn::GetAtt:
        [ ReceiverInstanceNetworkInterface, PrimaryPrivateIpAddress ]
